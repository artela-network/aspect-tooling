// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.3

import { Writer, Reader } from 'as-proto/assembly';

export class JitInherentResponse {
  static encode(message: JitInherentResponse, writer: Writer): void {
    const jitInherentHashes = message.jitInherentHashes;
    if (jitInherentHashes.length !== 0) {
      for (let i: i32 = 0; i < jitInherentHashes.length; ++i) {
        writer.uint32(10);
        writer.bytes(jitInherentHashes[i]);
      }
    }

    writer.uint32(18);
    writer.bytes(message.txHash);

    writer.uint32(24);
    writer.bool(message.success);

    writer.uint32(34);
    writer.bytes(message.ret);

    writer.uint32(40);
    writer.uint64(message.leftoverGas);
  }

  static decode(reader: Reader, length: i32): JitInherentResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new JitInherentResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.jitInherentHashes.push(reader.bytes());
          break;

        case 2:
          message.txHash = reader.bytes();
          break;

        case 3:
          message.success = reader.bool();
          break;

        case 4:
          message.ret = reader.bytes();
          break;

        case 5:
          message.leftoverGas = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  jitInherentHashes: Array<Uint8Array>;
  txHash: Uint8Array;
  success: bool;
  ret: Uint8Array;
  leftoverGas: u64;

  constructor(
    jitInherentHashes: Array<Uint8Array> = [],
    txHash: Uint8Array = new Uint8Array(0),
    success: bool = false,
    ret: Uint8Array = new Uint8Array(0),
    leftoverGas: u64 = 0,
  ) {
    this.jitInherentHashes = jitInherentHashes;
    this.txHash = txHash;
    this.success = success;
    this.ret = ret;
    this.leftoverGas = leftoverGas;
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";

export class AspectCode {
  static encode(message: AspectCode, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.aspectId);

    writer.uint32(16);
    writer.uint64(message.version);

    writer.uint32(24);
    writer.uint32(message.priority);

    writer.uint32(34);
    writer.bytes(message.code);
  }

  static decode(reader: Reader, length: i32): AspectCode {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AspectCode();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.aspectId = reader.string();
          break;

        case 2:
          message.version = reader.uint64();
          break;

        case 3:
          message.priority = reader.uint32();
          break;

        case 4:
          message.code = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  aspectId: string;
  version: u64;
  priority: u32;
  code: Uint8Array;

  constructor(
    aspectId: string = "",
    version: u64 = 0,
    priority: u32 = 0,
    code: Uint8Array = new Uint8Array(0)
  ) {
    this.aspectId = aspectId;
    this.version = version;
    this.priority = priority;
    this.code = code;
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";

export class EthHeader {
  static encode(message: EthHeader, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.parentHash);

    writer.uint32(18);
    writer.string(message.uncleHash);

    writer.uint32(26);
    writer.string(message.miner);

    writer.uint32(34);
    writer.string(message.stateRoot);

    writer.uint32(42);
    writer.string(message.txHash);

    writer.uint32(50);
    writer.string(message.receiptHash);

    writer.uint32(56);
    writer.uint64(message.difficulty);

    writer.uint32(64);
    writer.uint64(message.number);

    writer.uint32(72);
    writer.uint64(message.gasLimit);

    writer.uint32(80);
    writer.uint64(message.gasUsed);

    writer.uint32(88);
    writer.uint64(message.timestamp);

    writer.uint32(98);
    writer.bytes(message.extraData);

    writer.uint32(106);
    writer.bytes(message.mixHash);

    writer.uint32(112);
    writer.uint64(message.nonce);

    writer.uint32(120);
    writer.uint64(message.baseFeePerGas);
  }

  static decode(reader: Reader, length: i32): EthHeader {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EthHeader();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.parentHash = reader.string();
          break;

        case 2:
          message.uncleHash = reader.string();
          break;

        case 3:
          message.miner = reader.string();
          break;

        case 4:
          message.stateRoot = reader.string();
          break;

        case 5:
          message.txHash = reader.string();
          break;

        case 6:
          message.receiptHash = reader.string();
          break;

        case 7:
          message.difficulty = reader.uint64();
          break;

        case 8:
          message.number = reader.uint64();
          break;

        case 9:
          message.gasLimit = reader.uint64();
          break;

        case 10:
          message.gasUsed = reader.uint64();
          break;

        case 11:
          message.timestamp = reader.uint64();
          break;

        case 12:
          message.extraData = reader.bytes();
          break;

        case 13:
          message.mixHash = reader.bytes();
          break;

        case 14:
          message.nonce = reader.uint64();
          break;

        case 15:
          message.baseFeePerGas = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  parentHash: string;
  uncleHash: string;
  miner: string;
  stateRoot: string;
  txHash: string;
  receiptHash: string;
  difficulty: u64;
  number: u64;
  gasLimit: u64;
  gasUsed: u64;
  timestamp: u64;
  extraData: Uint8Array;
  mixHash: Uint8Array;
  nonce: u64;
  baseFeePerGas: u64;

  constructor(
    parentHash: string = "",
    uncleHash: string = "",
    miner: string = "",
    stateRoot: string = "",
    txHash: string = "",
    receiptHash: string = "",
    difficulty: u64 = 0,
    number: u64 = 0,
    gasLimit: u64 = 0,
    gasUsed: u64 = 0,
    timestamp: u64 = 0,
    extraData: Uint8Array = new Uint8Array(0),
    mixHash: Uint8Array = new Uint8Array(0),
    nonce: u64 = 0,
    baseFeePerGas: u64 = 0
  ) {
    this.parentHash = parentHash;
    this.uncleHash = uncleHash;
    this.miner = miner;
    this.stateRoot = stateRoot;
    this.txHash = txHash;
    this.receiptHash = receiptHash;
    this.difficulty = difficulty;
    this.number = number;
    this.gasLimit = gasLimit;
    this.gasUsed = gasUsed;
    this.timestamp = timestamp;
    this.extraData = extraData;
    this.mixHash = mixHash;
    this.nonce = nonce;
    this.baseFeePerGas = baseFeePerGas;
  }
}

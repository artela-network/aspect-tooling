// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";
import { AspAccessTuple } from "./asp-access-tuple";

export class AspTransaction {
  static encode(message: AspTransaction, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.chainId);

    writer.uint32(16);
    writer.uint64(message.nonce);

    writer.uint32(26);
    writer.string(message.gasTipCap);

    writer.uint32(34);
    writer.string(message.gasFeeCap);

    writer.uint32(40);
    writer.uint64(message.gasLimit);

    writer.uint32(48);
    writer.uint64(message.gasPrice);

    writer.uint32(58);
    writer.string(message.to);

    writer.uint32(64);
    writer.uint64(message.value);

    writer.uint32(74);
    writer.bytes(message.input);

    const accessList = message.accessList;
    for (let i: i32 = 0; i < accessList.length; ++i) {
      writer.uint32(82);
      writer.fork();
      AspAccessTuple.encode(accessList[i], writer);
      writer.ldelim();
    }

    writer.uint32(90);
    writer.bytes(message.blockHash);

    writer.uint32(96);
    writer.int64(message.blockNumber);

    writer.uint32(106);
    writer.string(message.from);

    writer.uint32(114);
    writer.bytes(message.hash);

    writer.uint32(120);
    writer.int64(message.transactionIndex);

    writer.uint32(128);
    writer.uint64(message.type);

    writer.uint32(138);
    writer.bytes(message.v);

    writer.uint32(146);
    writer.bytes(message.r);

    writer.uint32(154);
    writer.bytes(message.s);
  }

  static decode(reader: Reader, length: i32): AspTransaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AspTransaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.chainId = reader.string();
          break;

        case 2:
          message.nonce = reader.uint64();
          break;

        case 3:
          message.gasTipCap = reader.string();
          break;

        case 4:
          message.gasFeeCap = reader.string();
          break;

        case 5:
          message.gasLimit = reader.uint64();
          break;

        case 6:
          message.gasPrice = reader.uint64();
          break;

        case 7:
          message.to = reader.string();
          break;

        case 8:
          message.value = reader.uint64();
          break;

        case 9:
          message.input = reader.bytes();
          break;

        case 10:
          message.accessList.push(
            AspAccessTuple.decode(reader, reader.uint32())
          );
          break;

        case 11:
          message.blockHash = reader.bytes();
          break;

        case 12:
          message.blockNumber = reader.int64();
          break;

        case 13:
          message.from = reader.string();
          break;

        case 14:
          message.hash = reader.bytes();
          break;

        case 15:
          message.transactionIndex = reader.int64();
          break;

        case 16:
          message.type = reader.uint64();
          break;

        case 17:
          message.v = reader.bytes();
          break;

        case 18:
          message.r = reader.bytes();
          break;

        case 19:
          message.s = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  chainId: string;
  nonce: u64;
  gasTipCap: string;
  gasFeeCap: string;
  gasLimit: u64;
  gasPrice: u64;
  to: string;
  value: u64;
  input: Uint8Array;
  accessList: Array<AspAccessTuple>;
  blockHash: Uint8Array;
  blockNumber: i64;
  from: string;
  hash: Uint8Array;
  transactionIndex: i64;
  type: u64;
  v: Uint8Array;
  r: Uint8Array;
  s: Uint8Array;

  constructor(
    chainId: string = "",
    nonce: u64 = 0,
    gasTipCap: string = "",
    gasFeeCap: string = "",
    gasLimit: u64 = 0,
    gasPrice: u64 = 0,
    to: string = "",
    value: u64 = 0,
    input: Uint8Array = new Uint8Array(0),
    accessList: Array<AspAccessTuple> = [],
    blockHash: Uint8Array = new Uint8Array(0),
    blockNumber: i64 = 0,
    from: string = "",
    hash: Uint8Array = new Uint8Array(0),
    transactionIndex: i64 = 0,
    type: u64 = 0,
    v: Uint8Array = new Uint8Array(0),
    r: Uint8Array = new Uint8Array(0),
    s: Uint8Array = new Uint8Array(0)
  ) {
    this.chainId = chainId;
    this.nonce = nonce;
    this.gasTipCap = gasTipCap;
    this.gasFeeCap = gasFeeCap;
    this.gasLimit = gasLimit;
    this.gasPrice = gasPrice;
    this.to = to;
    this.value = value;
    this.input = input;
    this.accessList = accessList;
    this.blockHash = blockHash;
    this.blockNumber = blockNumber;
    this.from = from;
    this.hash = hash;
    this.transactionIndex = transactionIndex;
    this.type = type;
    this.v = v;
    this.r = r;
    this.s = s;
  }
}

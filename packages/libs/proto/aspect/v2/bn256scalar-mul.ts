// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { CurvePoint } from './curve-point';
import { Protobuf, Reader, Writer } from 'as-proto/assembly';

export class Bn256ScalarMul {
  static encode(message: Bn256ScalarMul, writer: Writer): void {
    const a = message.a;
    if (a !== null) {
      writer.uint32(10);
      writer.fork();
      CurvePoint.encode(a, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.bytes(message.scalar);
  }

  static decode(reader: Reader, length: i32): Bn256ScalarMul {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Bn256ScalarMul();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.a = CurvePoint.decode(reader, reader.uint32());
          break;

        case 2:
          message.scalar = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  a: CurvePoint | null;
  scalar: Uint8Array;

  constructor(
    a: CurvePoint | null = null,
    scalar: Uint8Array = new Uint8Array(0)
  ) {
    this.a = a;
    this.scalar = scalar;
  }
}

export function encodeBn256ScalarMul(message: Bn256ScalarMul): Uint8Array {
  return Protobuf.encode(message, Bn256ScalarMul.encode);
}

export function decodeBn256ScalarMul(buffer: Uint8Array): Bn256ScalarMul {
  return Protobuf.decode<Bn256ScalarMul>(buffer, Bn256ScalarMul.decode);
}
// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { CurvePoint } from './curve-point';
import { Protobuf, Reader, Writer } from 'as-proto/assembly';

export class Bn256AddInput {
  static encode(message: Bn256AddInput, writer: Writer): void {
    const a = message.a;
    if (a !== null) {
      writer.uint32(10);
      writer.fork();
      CurvePoint.encode(a, writer);
      writer.ldelim();
    }

    const b = message.b;
    if (b !== null) {
      writer.uint32(18);
      writer.fork();
      CurvePoint.encode(b, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Bn256AddInput {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Bn256AddInput();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.a = CurvePoint.decode(reader, reader.uint32());
          break;

        case 2:
          message.b = CurvePoint.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  a: CurvePoint | null;
  b: CurvePoint | null;

  constructor(a: CurvePoint | null = null, b: CurvePoint | null = null) {
    this.a = a;
    this.b = b;
  }
}

export function encodeBn256AddInput(message: Bn256AddInput): Uint8Array {
  return Protobuf.encode(message, Bn256AddInput.encode);
}

export function decodeBn256AddInput(buffer: Uint8Array): Bn256AddInput {
  return Protobuf.decode<Bn256AddInput>(buffer, Bn256AddInput.decode);
}
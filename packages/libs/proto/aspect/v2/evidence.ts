// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";
import { Validator } from "./validator";
import { Timestamp } from "../../google/protobuf/timestamp";
import { EvidenceType } from "./evidence-type";

export class Evidence {
  static encode(message: Evidence, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.type);

    const validator = message.validator;
    if (validator !== null) {
      writer.uint32(18);
      writer.fork();
      Validator.encode(validator, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int64(message.height);

    const time = message.time;
    if (time !== null) {
      writer.uint32(34);
      writer.fork();
      Timestamp.encode(time, writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.int64(message.totalVotingPower);
  }

  static decode(reader: Reader, length: i32): Evidence {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Evidence();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.type = reader.int32();
          break;

        case 2:
          message.validator = Validator.decode(reader, reader.uint32());
          break;

        case 3:
          message.height = reader.int64();
          break;

        case 4:
          message.time = Timestamp.decode(reader, reader.uint32());
          break;

        case 5:
          message.totalVotingPower = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  type: EvidenceType;
  validator: Validator | null;
  height: i64;
  time: Timestamp | null;
  totalVotingPower: i64;

  constructor(
    type: EvidenceType = 0,
    validator: Validator | null = null,
    height: i64 = 0,
    time: Timestamp | null = null,
    totalVotingPower: i64 = 0
  ) {
    this.type = type;
    this.validator = validator;
    this.height = height;
    this.time = time;
    this.totalVotingPower = totalVotingPower;
  }
}

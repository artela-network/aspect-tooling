// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Protobuf, Reader, Writer } from 'as-proto/assembly';

export class EcRecoverInput {
  static encode(message: EcRecoverInput, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.hash);

    writer.uint32(18);
    writer.bytes(message.v);

    writer.uint32(26);
    writer.bytes(message.r);

    writer.uint32(34);
    writer.bytes(message.s);
  }

  static decode(reader: Reader, length: i32): EcRecoverInput {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EcRecoverInput();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.bytes();
          break;

        case 2:
          message.v = reader.bytes();
          break;

        case 3:
          message.r = reader.bytes();
          break;

        case 4:
          message.s = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hash: Uint8Array;
  v: Uint8Array;
  r: Uint8Array;
  s: Uint8Array;

  constructor(
    hash: Uint8Array = new Uint8Array(0),
    v: Uint8Array = new Uint8Array(0),
    r: Uint8Array = new Uint8Array(0),
    s: Uint8Array = new Uint8Array(0)
  ) {
    this.hash = hash;
    this.v = v;
    this.r = r;
    this.s = s;
  }
}

export function encodeEcRecoverInput(message: EcRecoverInput): Uint8Array {
  return Protobuf.encode(message, EcRecoverInput.encode);
}

export function decodeEcRecoverInput(buffer: Uint8Array): EcRecoverInput {
  return Protobuf.decode<EcRecoverInput>(buffer, EcRecoverInput.decode);
}
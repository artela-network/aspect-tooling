// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.27.1

import { Writer, Reader } from "as-proto/assembly";

export class JitInherentRequest {
  static encode(message: JitInherentRequest, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.sender);

    writer.uint32(16);
    writer.uint64(message.nonce);

    writer.uint32(26);
    writer.bytes(message.nonceKey);

    writer.uint32(34);
    writer.bytes(message.initCode);

    writer.uint32(42);
    writer.bytes(message.callData);

    writer.uint32(48);
    writer.uint64(message.callGasLimit);

    writer.uint32(56);
    writer.uint64(message.verificationGasLimit);

    writer.uint32(66);
    writer.bytes(message.paymasterAndData);
  }

  static decode(reader: Reader, length: i32): JitInherentRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new JitInherentRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.bytes();
          break;

        case 2:
          message.nonce = reader.uint64();
          break;

        case 3:
          message.nonceKey = reader.bytes();
          break;

        case 4:
          message.initCode = reader.bytes();
          break;

        case 5:
          message.callData = reader.bytes();
          break;

        case 6:
          message.callGasLimit = reader.uint64();
          break;

        case 7:
          message.verificationGasLimit = reader.uint64();
          break;

        case 8:
          message.paymasterAndData = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: Uint8Array;
  nonce: u64;
  nonceKey: Uint8Array;
  initCode: Uint8Array;
  callData: Uint8Array;
  callGasLimit: u64;
  verificationGasLimit: u64;
  paymasterAndData: Uint8Array;

  constructor(
    sender: Uint8Array = new Uint8Array(0),
    nonce: u64 = 0,
    nonceKey: Uint8Array = new Uint8Array(0),
    initCode: Uint8Array = new Uint8Array(0),
    callData: Uint8Array = new Uint8Array(0),
    callGasLimit: u64 = 0,
    verificationGasLimit: u64 = 0,
    paymasterAndData: Uint8Array = new Uint8Array(0)
  ) {
    this.sender = sender;
    this.nonce = nonce;
    this.nonceKey = nonceKey;
    this.initCode = initCode;
    this.callData = callData;
    this.callGasLimit = callGasLimit;
    this.verificationGasLimit = verificationGasLimit;
    this.paymasterAndData = paymasterAndData;
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Protobuf, Reader, Writer } from "as-proto/assembly";

export class StaticCallRequest {
  static encode(message: StaticCallRequest, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.from);

    writer.uint32(18);
    writer.bytes(message.to);

    writer.uint32(26);
    writer.bytes(message.data);

    writer.uint32(32);
    writer.uint64(message.gas);
  }

  static decode(reader: Reader, length: i32): StaticCallRequest {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StaticCallRequest();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.from = reader.bytes();
          break;

        case 2:
          message.to = reader.bytes();
          break;

        case 3:
          message.data = reader.bytes();
          break;

        case 4:
          message.gas = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  from: Uint8Array;
  to: Uint8Array;
  data: Uint8Array;
  gas: u64;

  constructor(
    from: Uint8Array = new Uint8Array(0),
    to: Uint8Array = new Uint8Array(0),
    data: Uint8Array = new Uint8Array(0),
    gas: u64 = 0
  ) {
    this.from = from;
    this.to = to;
    this.data = data;
    this.gas = gas;
  }
}

export function encodeStaticCallRequest(
  message: StaticCallRequest
): Uint8Array {
  return Protobuf.encode(message, StaticCallRequest.encode);
}

export function decodeStaticCallRequest(buffer: Uint8Array): StaticCallRequest {
  return Protobuf.decode<StaticCallRequest>(buffer, StaticCallRequest.decode);
}

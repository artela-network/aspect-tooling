// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";

export class Ethash {
  static encode(message: Ethash, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.epoch);

    writer.uint32(18);
    writer.string(message.fullForkThreshold);

    writer.uint32(26);
    writer.string(message.blockReward);

    const difficultyBombDelays = message.difficultyBombDelays;
    if (difficultyBombDelays.length !== 0) {
      for (let i: i32 = 0; i < difficultyBombDelays.length; ++i) {
        writer.uint32(34);
        writer.string(difficultyBombDelays[i]);
      }
    }

    writer.uint32(42);
    writer.string(message.inception);
  }

  static decode(reader: Reader, length: i32): Ethash {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Ethash();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.epoch = reader.uint32();
          break;

        case 2:
          message.fullForkThreshold = reader.string();
          break;

        case 3:
          message.blockReward = reader.string();
          break;

        case 4:
          message.difficultyBombDelays.push(reader.string());
          break;

        case 5:
          message.inception = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  epoch: u32;
  fullForkThreshold: string;
  blockReward: string;
  difficultyBombDelays: Array<string>;
  inception: string;

  constructor(
    epoch: u32 = 0,
    fullForkThreshold: string = "",
    blockReward: string = "",
    difficultyBombDelays: Array<string> = [],
    inception: string = ""
  ) {
    this.epoch = epoch;
    this.fullForkThreshold = fullForkThreshold;
    this.blockReward = blockReward;
    this.difficultyBombDelays = difficultyBombDelays;
    this.inception = inception;
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Protobuf, Reader, Writer } from 'as-proto/assembly';

export class Transaction {
  static encode(message: Transaction, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.blockHash);

    writer.uint32(16);
    writer.uint64(message.blockNumber);

    writer.uint32(26);
    writer.bytes(message.from);

    writer.uint32(32);
    writer.uint64(message.gas);

    writer.uint32(40);
    writer.uint64(message.gasPrice);

    writer.uint32(48);
    writer.uint64(message.gasFeeCap);

    writer.uint32(56);
    writer.uint64(message.gasTipCap);

    writer.uint32(66);
    writer.bytes(message.hash);

    writer.uint32(74);
    writer.bytes(message.input);

    writer.uint32(80);
    writer.uint64(message.nonce);

    writer.uint32(90);
    writer.bytes(message.to);

    writer.uint32(96);
    writer.uint64(message.transactionIndex);

    writer.uint32(106);
    writer.bytes(message.value);

    writer.uint32(112);
    writer.uint64(message.type);

    writer.uint32(122);
    writer.bytes(message.accesses);

    writer.uint32(128);
    writer.uint64(message.chainId);

    writer.uint32(138);
    writer.bytes(message.v);

    writer.uint32(146);
    writer.bytes(message.r);

    writer.uint32(154);
    writer.bytes(message.s);
  }

  static decode(reader: Reader, length: i32): Transaction {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Transaction();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.blockHash = reader.bytes();
          break;

        case 2:
          message.blockNumber = reader.uint64();
          break;

        case 3:
          message.from = reader.bytes();
          break;

        case 4:
          message.gas = reader.uint64();
          break;

        case 5:
          message.gasPrice = reader.uint64();
          break;

        case 6:
          message.gasFeeCap = reader.uint64();
          break;

        case 7:
          message.gasTipCap = reader.uint64();
          break;

        case 8:
          message.hash = reader.bytes();
          break;

        case 9:
          message.input = reader.bytes();
          break;

        case 10:
          message.nonce = reader.uint64();
          break;

        case 11:
          message.to = reader.bytes();
          break;

        case 12:
          message.transactionIndex = reader.uint64();
          break;

        case 13:
          message.value = reader.bytes();
          break;

        case 14:
          message.type = reader.uint64();
          break;

        case 15:
          message.accesses = reader.bytes();
          break;

        case 16:
          message.chainId = reader.uint64();
          break;

        case 17:
          message.v = reader.bytes();
          break;

        case 18:
          message.r = reader.bytes();
          break;

        case 19:
          message.s = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  blockHash: Uint8Array;
  blockNumber: u64;
  from: Uint8Array;
  gas: u64;
  gasPrice: u64;
  gasFeeCap: u64;
  gasTipCap: u64;
  hash: Uint8Array;
  input: Uint8Array;
  nonce: u64;
  to: Uint8Array;
  transactionIndex: u64;
  value: Uint8Array;
  type: u64;
  accesses: Uint8Array;
  chainId: u64;
  v: Uint8Array;
  r: Uint8Array;
  s: Uint8Array;

  constructor(
    blockHash: Uint8Array = new Uint8Array(0),
    blockNumber: u64 = 0,
    from: Uint8Array = new Uint8Array(0),
    gas: u64 = 0,
    gasPrice: u64 = 0,
    gasFeeCap: u64 = 0,
    gasTipCap: u64 = 0,
    hash: Uint8Array = new Uint8Array(0),
    input: Uint8Array = new Uint8Array(0),
    nonce: u64 = 0,
    to: Uint8Array = new Uint8Array(0),
    transactionIndex: u64 = 0,
    value: Uint8Array = new Uint8Array(0),
    type: u64 = 0,
    accesses: Uint8Array = new Uint8Array(0),
    chainId: u64 = 0,
    v: Uint8Array = new Uint8Array(0),
    r: Uint8Array = new Uint8Array(0),
    s: Uint8Array = new Uint8Array(0),
  ) {
    this.blockHash = blockHash;
    this.blockNumber = blockNumber;
    this.from = from;
    this.gas = gas;
    this.gasPrice = gasPrice;
    this.gasFeeCap = gasFeeCap;
    this.gasTipCap = gasTipCap;
    this.hash = hash;
    this.input = input;
    this.nonce = nonce;
    this.to = to;
    this.transactionIndex = transactionIndex;
    this.value = value;
    this.type = type;
    this.accesses = accesses;
    this.chainId = chainId;
    this.v = v;
    this.r = r;
    this.s = s;
  }
}

export function encodeTransaction(message: Transaction): Uint8Array {
  return Protobuf.encode(message, Transaction.encode);
}

export function decodeTransaction(buffer: Uint8Array): Transaction {
  return Protobuf.decode<Transaction>(buffer, Transaction.decode);
}

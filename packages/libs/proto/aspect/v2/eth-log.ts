// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Protobuf, Reader, Writer } from 'as-proto/assembly';

export class EthLog {
  static encode(message: EthLog, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.address);

    const topics = message.topics;
    if (topics.length !== 0) {
      for (let i: i32 = 0; i < topics.length; ++i) {
        writer.uint32(18);
        writer.bytes(topics[i]);
      }
    }

    writer.uint32(26);
    writer.bytes(message.data);

    writer.uint32(32);
    writer.uint64(message.index);
  }

  static decode(reader: Reader, length: i32): EthLog {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EthLog();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.bytes();
          break;

        case 2:
          message.topics.push(reader.bytes());
          break;

        case 3:
          message.data = reader.bytes();
          break;

        case 4:
          message.index = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: Uint8Array;
  topics: Array<Uint8Array>;
  data: Uint8Array;
  index: u64;

  constructor(
    address: Uint8Array = new Uint8Array(0),
    topics: Array<Uint8Array> = [],
    data: Uint8Array = new Uint8Array(0),
    index: u64 = 0,
  ) {
    this.address = address;
    this.topics = topics;
    this.data = data;
    this.index = index;
  }
}

export function encodeEthLog(message: EthLog): Uint8Array {
  return Protobuf.encode(message, EthLog.encode);
}

export function decodeEthLog(buffer: Uint8Array): EthLog {
  return Protobuf.decode<EthLog>(buffer, EthLog.decode);
}

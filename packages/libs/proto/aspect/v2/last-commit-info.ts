// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";
import { VoteInfo } from "./vote-info";

export class LastCommitInfo {
  static encode(message: LastCommitInfo, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.round);

    const votes = message.votes;
    for (let i: i32 = 0; i < votes.length; ++i) {
      writer.uint32(18);
      writer.fork();
      VoteInfo.encode(votes[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): LastCommitInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new LastCommitInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.round = reader.int32();
          break;

        case 2:
          message.votes.push(VoteInfo.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  round: i32;
  votes: Array<VoteInfo>;

  constructor(round: i32 = 0, votes: Array<VoteInfo> = []) {
    this.round = round;
    this.votes = votes;
  }
}

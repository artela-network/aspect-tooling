// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from 'as-proto/assembly';
import { EthTransaction } from './eth-transaction';
import { EthStackTransaction } from './eth-stack-transaction';
import { GasInfo } from './gas-info';

export class EthTxAspect {
  static encode(message: EthTxAspect, writer: Writer): void {
    const tx = message.tx;
    if (tx !== null) {
      writer.uint32(10);
      writer.fork();
      EthTransaction.encode(tx, writer);
      writer.ldelim();
    }

    const currInnerTx = message.currInnerTx;
    if (currInnerTx !== null) {
      writer.uint32(18);
      writer.fork();
      EthStackTransaction.encode(currInnerTx, writer);
      writer.ldelim();
    }

    const gasInfo = message.gasInfo;
    if (gasInfo !== null) {
      writer.uint32(26);
      writer.fork();
      GasInfo.encode(gasInfo, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): EthTxAspect {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EthTxAspect();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.tx = EthTransaction.decode(reader, reader.uint32());
          break;

        case 2:
          message.currInnerTx = EthStackTransaction.decode(reader, reader.uint32());
          break;

        case 3:
          message.gasInfo = GasInfo.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  tx: EthTransaction | null;
  currInnerTx: EthStackTransaction | null;
  gasInfo: GasInfo | null;

  constructor(
    tx: EthTransaction | null = null,
    currInnerTx: EthStackTransaction | null = null,
    gasInfo: GasInfo | null = null,
  ) {
    this.tx = tx;
    this.currInnerTx = currInnerTx;
    this.gasInfo = gasInfo;
  }
}

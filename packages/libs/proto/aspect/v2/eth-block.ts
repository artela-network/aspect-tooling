// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from 'as-proto/assembly';
import { EthBlockHeader } from './eth-block-header';
import { EthTransaction } from './eth-transaction';

export class EthBlock {
  static encode(message: EthBlock, writer: Writer): void {
    const header = message.header;
    if (header !== null) {
      writer.uint32(10);
      writer.fork();
      EthBlockHeader.encode(header, writer);
      writer.ldelim();
    }

    const uncles = message.uncles;
    for (let i: i32 = 0; i < uncles.length; ++i) {
      writer.uint32(18);
      writer.fork();
      EthBlockHeader.encode(uncles[i], writer);
      writer.ldelim();
    }

    const transactions = message.transactions;
    for (let i: i32 = 0; i < transactions.length; ++i) {
      writer.uint32(26);
      writer.fork();
      EthTransaction.encode(transactions[i], writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.string(message.hash);

    writer.uint32(40);
    writer.uint64(message.size);

    writer.uint32(50);
    writer.bytes(message.dataHash);
  }

  static decode(reader: Reader, length: i32): EthBlock {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EthBlock();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.header = EthBlockHeader.decode(reader, reader.uint32());
          break;

        case 2:
          message.uncles.push(EthBlockHeader.decode(reader, reader.uint32()));
          break;

        case 3:
          message.transactions.push(EthTransaction.decode(reader, reader.uint32()));
          break;

        case 4:
          message.hash = reader.string();
          break;

        case 5:
          message.size = reader.uint64();
          break;

        case 6:
          message.dataHash = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  header: EthBlockHeader | null;
  uncles: Array<EthBlockHeader>;
  transactions: Array<EthTransaction>;
  hash: string;
  size: u64;
  dataHash: Uint8Array;

  constructor(
    header: EthBlockHeader | null = null,
    uncles: Array<EthBlockHeader> = [],
    transactions: Array<EthTransaction> = [],
    hash: string = '',
    size: u64 = 0,
    dataHash: Uint8Array = new Uint8Array(0),
  ) {
    this.header = header;
    this.uncles = uncles;
    this.transactions = transactions;
    this.hash = hash;
    this.size = size;
    this.dataHash = dataHash;
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";
import { RunResult } from "./run-result";
import { EthLog } from "./eth-log";

export class StateLogQueryResponse {
  static encode(message: StateLogQueryResponse, writer: Writer): void {
    const result = message.result;
    if (result !== null) {
      writer.uint32(10);
      writer.fork();
      RunResult.encode(result, writer);
      writer.ldelim();
    }

    const logs = message.logs;
    for (let i: i32 = 0; i < logs.length; ++i) {
      writer.uint32(18);
      writer.fork();
      EthLog.encode(logs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): StateLogQueryResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new StateLogQueryResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.result = RunResult.decode(reader, reader.uint32());
          break;

        case 2:
          message.logs.push(EthLog.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  result: RunResult | null;
  logs: Array<EthLog>;

  constructor(result: RunResult | null = null, logs: Array<EthLog> = []) {
    this.result = result;
    this.logs = logs;
  }
}

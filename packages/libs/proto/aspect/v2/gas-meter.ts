// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";

export class GasMeter {
  static encode(message: GasMeter, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.gasConsumed);

    writer.uint32(16);
    writer.uint32(message.gasConsumedToLimit);

    writer.uint32(24);
    writer.uint32(message.gasRemaining);

    writer.uint32(32);
    writer.uint32(message.limit);
  }

  static decode(reader: Reader, length: i32): GasMeter {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new GasMeter();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.gasConsumed = reader.uint32();
          break;

        case 2:
          message.gasConsumedToLimit = reader.uint32();
          break;

        case 3:
          message.gasRemaining = reader.uint32();
          break;

        case 4:
          message.limit = reader.uint32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  gasConsumed: u32;
  gasConsumedToLimit: u32;
  gasRemaining: u32;
  limit: u32;

  constructor(
    gasConsumed: u32 = 0,
    gasConsumedToLimit: u32 = 0,
    gasRemaining: u32 = 0,
    limit: u32 = 0
  ) {
    this.gasConsumed = gasConsumed;
    this.gasConsumedToLimit = gasConsumedToLimit;
    this.gasRemaining = gasRemaining;
    this.limit = limit;
  }
}

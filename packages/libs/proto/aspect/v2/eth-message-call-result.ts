// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.3

import { Writer, Reader } from "as-proto/assembly";
import { EthLog } from "./eth-log";

export class EthMessageCallResult {
  static encode(message: EthMessageCallResult, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.hash);

    const logs = message.logs;
    for (let i: i32 = 0; i < logs.length; ++i) {
      writer.uint32(18);
      writer.fork();
      EthLog.encode(logs[i], writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.bytes(message.ret);

    writer.uint32(34);
    writer.string(message.vmError);

    writer.uint32(40);
    writer.uint64(message.gasUsed);
  }

  static decode(reader: Reader, length: i32): EthMessageCallResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EthMessageCallResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.string();
          break;

        case 2:
          message.logs.push(EthLog.decode(reader, reader.uint32()));
          break;

        case 3:
          message.ret = reader.bytes();
          break;

        case 4:
          message.vmError = reader.string();
          break;

        case 5:
          message.gasUsed = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hash: string;
  logs: Array<EthLog>;
  ret: Uint8Array;
  vmError: string;
  gasUsed: u64;

  constructor(
    hash: string = "",
    logs: Array<EthLog> = [],
    ret: Uint8Array = new Uint8Array(0),
    vmError: string = "",
    gasUsed: u64 = 0
  ) {
    this.hash = hash;
    this.logs = logs;
    this.ret = ret;
    this.vmError = vmError;
    this.gasUsed = gasUsed;
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.24.3

import { Writer, Reader } from "as-proto/assembly";

export class EvmParams {
  static encode(message: EvmParams, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.evmDenom);

    writer.uint32(16);
    writer.bool(message.enableCreate);

    writer.uint32(24);
    writer.bool(message.enableCall);

    const extraEips = message.extraEips;
    if (extraEips.length !== 0) {
      for (let i: i32 = 0; i < extraEips.length; ++i) {
        writer.uint32(32);
        writer.int64(extraEips[i]);
      }
    }

    writer.uint32(40);
    writer.bool(message.allowUnprotectedTxs);
  }

  static decode(reader: Reader, length: i32): EvmParams {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EvmParams();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.evmDenom = reader.string();
          break;

        case 2:
          message.enableCreate = reader.bool();
          break;

        case 3:
          message.enableCall = reader.bool();
          break;

        case 4:
          message.extraEips.push(reader.int64());
          break;

        case 5:
          message.allowUnprotectedTxs = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  evmDenom: string;
  enableCreate: bool;
  enableCall: bool;
  extraEips: Array<i64>;
  allowUnprotectedTxs: bool;

  constructor(
    evmDenom: string = "",
    enableCreate: bool = false,
    enableCall: bool = false,
    extraEips: Array<i64> = [],
    allowUnprotectedTxs: bool = false
  ) {
    this.evmDenom = evmDenom;
    this.enableCreate = enableCreate;
    this.enableCall = enableCall;
    this.extraEips = extraEips;
    this.allowUnprotectedTxs = allowUnprotectedTxs;
  }
}

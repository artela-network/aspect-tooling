// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Protobuf, Reader, Writer } from 'as-proto/assembly';

export class G2 {
  static encode(message: G2, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.x1);

    writer.uint32(18);
    writer.bytes(message.x2);

    writer.uint32(26);
    writer.bytes(message.y1);

    writer.uint32(34);
    writer.bytes(message.y2);
  }

  static decode(reader: Reader, length: i32): G2 {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new G2();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.x1 = reader.bytes();
          break;

        case 2:
          message.x2 = reader.bytes();
          break;

        case 3:
          message.y1 = reader.bytes();
          break;

        case 4:
          message.y2 = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  x1: Uint8Array;
  x2: Uint8Array;
  y1: Uint8Array;
  y2: Uint8Array;

  constructor(
    x1: Uint8Array = new Uint8Array(0),
    x2: Uint8Array = new Uint8Array(0),
    y1: Uint8Array = new Uint8Array(0),
    y2: Uint8Array = new Uint8Array(0)
  ) {
    this.x1 = x1;
    this.x2 = x2;
    this.y1 = y1;
    this.y2 = y2;
  }
}

export function encodeG2(message: G2): Uint8Array {
  return Protobuf.encode(message, G2.encode);
}

export function decodeG2(buffer: Uint8Array): G2 {
  return Protobuf.decode<G2>(buffer, G2.decode);
}
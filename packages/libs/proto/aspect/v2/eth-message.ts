// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";

export class EthMessage {
  static encode(message: EthMessage, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.to);

    writer.uint32(18);
    writer.bytes(message.input);

    writer.uint32(24);
    writer.uint64(message.nonce);

    writer.uint32(34);
    writer.string(message.from);

    writer.uint32(42);
    writer.string(message.gasTipCap);

    writer.uint32(50);
    writer.string(message.gasFeeCap);

    writer.uint32(56);
    writer.uint64(message.gas);

    writer.uint32(66);
    writer.string(message.gasPrice);

    writer.uint32(74);
    writer.string(message.value);

    writer.uint32(80);
    writer.bool(message.isFake);
  }

  static decode(reader: Reader, length: i32): EthMessage {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EthMessage();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.to = reader.string();
          break;

        case 2:
          message.input = reader.bytes();
          break;

        case 3:
          message.nonce = reader.uint64();
          break;

        case 4:
          message.from = reader.string();
          break;

        case 5:
          message.gasTipCap = reader.string();
          break;

        case 6:
          message.gasFeeCap = reader.string();
          break;

        case 7:
          message.gas = reader.uint64();
          break;

        case 8:
          message.gasPrice = reader.string();
          break;

        case 9:
          message.value = reader.string();
          break;

        case 10:
          message.isFake = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  to: string;
  input: Uint8Array;
  nonce: u64;
  from: string;
  gasTipCap: string;
  gasFeeCap: string;
  gas: u64;
  gasPrice: string;
  value: string;
  isFake: bool;

  constructor(
    to: string = "",
    input: Uint8Array = new Uint8Array(0),
    nonce: u64 = 0,
    from: string = "",
    gasTipCap: string = "",
    gasFeeCap: string = "",
    gas: u64 = 0,
    gasPrice: string = "",
    value: string = "",
    isFake: bool = false
  ) {
    this.to = to;
    this.input = input;
    this.nonce = nonce;
    this.from = from;
    this.gasTipCap = gasTipCap;
    this.gasFeeCap = gasFeeCap;
    this.gas = gas;
    this.gasPrice = gasPrice;
    this.value = value;
    this.isFake = isFake;
  }
}

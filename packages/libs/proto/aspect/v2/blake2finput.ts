// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.25.1

import { Protobuf, Reader, Writer } from 'as-proto/assembly';

export class Blake2FInput {
  static encode(message: Blake2FInput, writer: Writer): void {
    const h = message.h;
    if (h.length !== 0) {
      for (let i: i32 = 0; i < h.length; ++i) {
        writer.uint32(8);
        writer.uint64(h[i]);
      }
    }

    const m = message.m;
    if (m.length !== 0) {
      for (let i: i32 = 0; i < m.length; ++i) {
        writer.uint32(16);
        writer.uint64(m[i]);
      }
    }

    const t = message.t;
    if (t.length !== 0) {
      for (let i: i32 = 0; i < t.length; ++i) {
        writer.uint32(24);
        writer.uint64(t[i]);
      }
    }

    writer.uint32(32);
    writer.bool(message.final);

    writer.uint32(40);
    writer.uint32(message.rounds);
  }

  static decode(reader: Reader, length: i32): Blake2FInput {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Blake2FInput();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.h.push(reader.uint64());
          break;

        case 2:
          message.m.push(reader.uint64());
          break;

        case 3:
          message.t.push(reader.uint64());
          break;

        case 4:
          message.final = reader.bool();
          break;

        case 5:
          message.rounds = reader.uint32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  h: Array<u64>;
  m: Array<u64>;
  t: Array<u64>;
  final: bool;
  rounds: u32;

  constructor(
    h: Array<u64> = [],
    m: Array<u64> = [],
    t: Array<u64> = [],
    final: bool = false,
    rounds: u32 = 0
  ) {
    this.h = h;
    this.m = m;
    this.t = t;
    this.final = final;
    this.rounds = rounds;
  }
}

export function encodeBlake2FInput(message: Blake2FInput): Uint8Array {
  return Protobuf.encode(message, Blake2FInput.encode);
}

export function decodeBlake2FInput(buffer: Uint8Array): Blake2FInput {
  return Protobuf.decode<Blake2FInput>(buffer, Blake2FInput.decode);
}
// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v5.27.1

import { Writer, Reader } from "as-proto/assembly";

export class Blake2FInput {
  static encode(message: Blake2FInput, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.h);

    writer.uint32(18);
    writer.bytes(message.m);

    writer.uint32(26);
    writer.bytes(message.t);

    writer.uint32(32);
    writer.bool(message.final);

    writer.uint32(42);
    writer.bytes(message.rounds);
  }

  static decode(reader: Reader, length: i32): Blake2FInput {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Blake2FInput();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.h = reader.bytes();
          break;

        case 2:
          message.m = reader.bytes();
          break;

        case 3:
          message.t = reader.bytes();
          break;

        case 4:
          message.final = reader.bool();
          break;

        case 5:
          message.rounds = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  h: Uint8Array;
  m: Uint8Array;
  t: Uint8Array;
  final: bool;
  rounds: Uint8Array;

  constructor(
    h: Uint8Array = new Uint8Array(0),
    m: Uint8Array = new Uint8Array(0),
    t: Uint8Array = new Uint8Array(0),
    final: bool = false,
    rounds: Uint8Array = new Uint8Array(0)
  ) {
    this.h = h;
    this.m = m;
    this.t = t;
    this.final = final;
    this.rounds = rounds;
  }
}

// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from 'as-proto/assembly';
import { GasInfo } from './gas-info';
import { AspectResponse } from './aspect-response';

export class JoinPointResult {
  static encode(message: JoinPointResult, writer: Writer): void {
    const gasInfo = message.gasInfo;
    if (gasInfo !== null) {
      writer.uint32(10);
      writer.fork();
      GasInfo.encode(gasInfo, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.txHash);

    const execResultMap = message.execResultMap;
    if (execResultMap !== null) {
      const execResultMapKeys = execResultMap.keys();
      for (let i: i32 = 0; i < execResultMapKeys.length; ++i) {
        const execResultMapKey = execResultMapKeys[i];
        writer.uint32(26);
        writer.fork();
        writer.uint32(10);
        writer.string(execResultMapKey);
        writer.uint32(18);
        writer.fork();
        AspectResponse.encode(execResultMap.get(execResultMapKey), writer);
        writer.ldelim();
        writer.ldelim();
      }
    }
  }

  static decode(reader: Reader, length: i32): JoinPointResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new JoinPointResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.gasInfo = GasInfo.decode(reader, reader.uint32());
          break;

        case 2:
          message.txHash = reader.string();
          break;

        case 3:
          let execResultMapKey: string = '';
          let execResultMapValue: AspectResponse | null = null;
          let execResultMapHasKey: bool = false;
          let execResultMapHasValue: bool = false;
          for (const end: usize = reader.ptr + reader.uint32(); reader.ptr < end; ) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                execResultMapKey = reader.string();
                execResultMapHasKey = true;
                break;

              case 2:
                execResultMapValue = AspectResponse.decode(reader, reader.uint32());
                execResultMapHasValue = true;
                break;

              default:
                reader.skipType(tag & 7);
                break;
            }
            if (message.execResultMap === null) {
              message.execResultMap = new Map<string, AspectResponse>();
            }
            const execResultMap = message.execResultMap;
            if (
              execResultMap !== null &&
              execResultMapHasKey &&
              execResultMapHasValue &&
              execResultMapValue !== null
            ) {
              execResultMap.set(execResultMapKey, execResultMapValue);
            }
          }
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  gasInfo: GasInfo | null;
  txHash: string;
  execResultMap: Map<string, AspectResponse>;

  constructor(
    gasInfo: GasInfo | null = null,
    txHash: string = '',
    execResultMap: Map<string, AspectResponse> = new Map(),
  ) {
    this.gasInfo = gasInfo;
    this.txHash = txHash;
    this.execResultMap = execResultMap;
  }
}

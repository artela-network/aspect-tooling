// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";
import { Ethash } from "./ethash";
import { Clique } from "./clique";

export class ChainConfig {
  static encode(message: ChainConfig, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.chainId);

    writer.uint32(18);
    writer.string(message.homesteadBlock);

    writer.uint32(26);
    writer.string(message.daoForkBlock);

    writer.uint32(32);
    writer.bool(message.daoForkSupport);

    writer.uint32(42);
    writer.string(message.eip150Block);

    writer.uint32(50);
    writer.string(message.eip150Hash);

    writer.uint32(58);
    writer.string(message.eip155Block);

    writer.uint32(66);
    writer.string(message.eip158Block);

    writer.uint32(74);
    writer.string(message.byzantiumBlock);

    writer.uint32(82);
    writer.string(message.constantinopleBlock);

    writer.uint32(90);
    writer.string(message.petersburgBlock);

    writer.uint32(98);
    writer.string(message.istanbulBlock);

    writer.uint32(106);
    writer.string(message.muirGlacierBlock);

    writer.uint32(114);
    writer.string(message.berlinBlock);

    writer.uint32(122);
    writer.string(message.londonBlock);

    writer.uint32(130);
    writer.string(message.arrowGlacierBlock);

    writer.uint32(138);
    writer.string(message.grayGlacierBlock);

    writer.uint32(146);
    writer.string(message.mergeNetsplitBlock);

    writer.uint32(154);
    writer.string(message.shanghaiBlock);

    writer.uint32(162);
    writer.string(message.cancunBlock);

    writer.uint32(170);
    writer.string(message.terminalTotalDifficulty);

    writer.uint32(176);
    writer.bool(message.terminalTotalDifficultyPassed);

    const ethash = message.ethash;
    if (ethash !== null) {
      writer.uint32(186);
      writer.fork();
      Ethash.encode(ethash, writer);
      writer.ldelim();
    }

    const clique = message.clique;
    if (clique !== null) {
      writer.uint32(194);
      writer.fork();
      Clique.encode(clique, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ChainConfig {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ChainConfig();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.chainId = reader.string();
          break;

        case 2:
          message.homesteadBlock = reader.string();
          break;

        case 3:
          message.daoForkBlock = reader.string();
          break;

        case 4:
          message.daoForkSupport = reader.bool();
          break;

        case 5:
          message.eip150Block = reader.string();
          break;

        case 6:
          message.eip150Hash = reader.string();
          break;

        case 7:
          message.eip155Block = reader.string();
          break;

        case 8:
          message.eip158Block = reader.string();
          break;

        case 9:
          message.byzantiumBlock = reader.string();
          break;

        case 10:
          message.constantinopleBlock = reader.string();
          break;

        case 11:
          message.petersburgBlock = reader.string();
          break;

        case 12:
          message.istanbulBlock = reader.string();
          break;

        case 13:
          message.muirGlacierBlock = reader.string();
          break;

        case 14:
          message.berlinBlock = reader.string();
          break;

        case 15:
          message.londonBlock = reader.string();
          break;

        case 16:
          message.arrowGlacierBlock = reader.string();
          break;

        case 17:
          message.grayGlacierBlock = reader.string();
          break;

        case 18:
          message.mergeNetsplitBlock = reader.string();
          break;

        case 19:
          message.shanghaiBlock = reader.string();
          break;

        case 20:
          message.cancunBlock = reader.string();
          break;

        case 21:
          message.terminalTotalDifficulty = reader.string();
          break;

        case 22:
          message.terminalTotalDifficultyPassed = reader.bool();
          break;

        case 23:
          message.ethash = Ethash.decode(reader, reader.uint32());
          break;

        case 24:
          message.clique = Clique.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  chainId: string;
  homesteadBlock: string;
  daoForkBlock: string;
  daoForkSupport: bool;
  eip150Block: string;
  eip150Hash: string;
  eip155Block: string;
  eip158Block: string;
  byzantiumBlock: string;
  constantinopleBlock: string;
  petersburgBlock: string;
  istanbulBlock: string;
  muirGlacierBlock: string;
  berlinBlock: string;
  londonBlock: string;
  arrowGlacierBlock: string;
  grayGlacierBlock: string;
  mergeNetsplitBlock: string;
  shanghaiBlock: string;
  cancunBlock: string;
  terminalTotalDifficulty: string;
  terminalTotalDifficultyPassed: bool;
  ethash: Ethash | null;
  clique: Clique | null;

  constructor(
    chainId: string = "",
    homesteadBlock: string = "",
    daoForkBlock: string = "",
    daoForkSupport: bool = false,
    eip150Block: string = "",
    eip150Hash: string = "",
    eip155Block: string = "",
    eip158Block: string = "",
    byzantiumBlock: string = "",
    constantinopleBlock: string = "",
    petersburgBlock: string = "",
    istanbulBlock: string = "",
    muirGlacierBlock: string = "",
    berlinBlock: string = "",
    londonBlock: string = "",
    arrowGlacierBlock: string = "",
    grayGlacierBlock: string = "",
    mergeNetsplitBlock: string = "",
    shanghaiBlock: string = "",
    cancunBlock: string = "",
    terminalTotalDifficulty: string = "",
    terminalTotalDifficultyPassed: bool = false,
    ethash: Ethash | null = null,
    clique: Clique | null = null
  ) {
    this.chainId = chainId;
    this.homesteadBlock = homesteadBlock;
    this.daoForkBlock = daoForkBlock;
    this.daoForkSupport = daoForkSupport;
    this.eip150Block = eip150Block;
    this.eip150Hash = eip150Hash;
    this.eip155Block = eip155Block;
    this.eip158Block = eip158Block;
    this.byzantiumBlock = byzantiumBlock;
    this.constantinopleBlock = constantinopleBlock;
    this.petersburgBlock = petersburgBlock;
    this.istanbulBlock = istanbulBlock;
    this.muirGlacierBlock = muirGlacierBlock;
    this.berlinBlock = berlinBlock;
    this.londonBlock = londonBlock;
    this.arrowGlacierBlock = arrowGlacierBlock;
    this.grayGlacierBlock = grayGlacierBlock;
    this.mergeNetsplitBlock = mergeNetsplitBlock;
    this.shanghaiBlock = shanghaiBlock;
    this.cancunBlock = cancunBlock;
    this.terminalTotalDifficulty = terminalTotalDifficulty;
    this.terminalTotalDifficultyPassed = terminalTotalDifficultyPassed;
    this.ethash = ethash;
    this.clique = clique;
  }
}

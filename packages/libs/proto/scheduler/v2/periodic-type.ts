// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.0
//   protoc        v4.23.2

import { Writer, Reader } from "as-proto/assembly";

export class PeriodicType {
  static encode(message: PeriodicType, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.startBlock);

    writer.uint32(16);
    writer.uint64(message.everyNBlocks);

    writer.uint32(24);
    writer.uint64(message.maxRetry);

    writer.uint32(32);
    writer.uint64(message.count);
  }

  static decode(reader: Reader, length: i32): PeriodicType {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PeriodicType();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.startBlock = reader.uint64();
          break;

        case 2:
          message.everyNBlocks = reader.uint64();
          break;

        case 3:
          message.maxRetry = reader.uint64();
          break;

        case 4:
          message.count = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  startBlock: u64;
  everyNBlocks: u64;
  maxRetry: u64;
  count: u64;

  constructor(
    startBlock: u64 = 0,
    everyNBlocks: u64 = 0,
    maxRetry: u64 = 0,
    count: u64 = 0
  ) {
    this.startBlock = startBlock;
    this.everyNBlocks = everyNBlocks;
    this.maxRetry = maxRetry;
    this.count = count;
  }
}

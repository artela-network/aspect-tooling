{
  "description": "Test JsonRPC namesapece eth",
  "actions": [
    {
      "description": "eth_chainId",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_chainId"
      },
      "expect": {
        "result.ret": {
          "notEq": "0x0"
        },
        "error": {
          "eq": ""
        }
      },
      "output": {
        "chainId": "result.ret"
      }
    },
    {
      "description": "eth_coinbase",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_coinbase"
      },
      "expect": {
        "result.ret.length": {
          "eq": 42
        },
        "result.ret": {
          "include": "0x"
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_blockNumber",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_blockNumber"
      },
      "expect": {
        "result.ret": {
          "include": "0x"
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "Create new account",
      "account": "",
      "type": "createAccounts",
      "options": {
        "fundingAmount": 2,
        "accountNumber": 3
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.accounts.length": {
          "eq": 3
        }
      },
      "output": {
        "accounts": "result.accounts"
      }
    },
    {
      "description": "eth_getBalance by account with balance",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBalance",
        "params": ["$accounts.0", "latest"]
      },
      "expect": {
        "result.ret": {
          "eq": "0x1bc16d674ec80000"
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_getBalance by account without balance",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBalance",
        "params": ["0xB3AC868dB93165C2C9A5A9005A98A0bf120B22Ad", "latest"]
      },
      "expect": {
        "result.ret": {
          "eq": "0x0"
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_getBalance by empty account",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBalance",
        "params": ["0x0000000000000000000000000000000000000000", "latest"]
      },
      "expect": {
        "result.ret": {
          "eq": "0x0"
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_getBalance by invalid account",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBalance",
        "params": ["0x3AC868dB93165C2C9A5A9005A98A0bf120B22Ad", "latest"]
      },
      "expect": {
        "error": {
          "notEq": ""
        }
      }
    },
    {
      "description": "Deploy counter contract",
      "account": "",
      "type": "deployContract",
      "options": {
        "code": "#CounterContract.bytecode",
        "abi": "#CounterContract.abi",
        "args": []
      },
      "expect": {
        "receipt.status": {
          "eq": true
        },
        "error": ""
      },
      "output": {
        "contractAddress": "receipt.contractAddress"
      }
    },
    {
      "description": "Call counter contract",
      "account": "",
      "type": "callContract",
      "options": {
        "contract": "$contractAddress",
        "method": "increase",
        "abi": "#CounterContract.abi",
        "args": [],
        "gas": "1000000"
      },
      "expect": {
        "receipt.status": {
          "eq": true
        },
        "error": {
          "eq": ""
        }
      },
      "output": {
        "callCounter_blockNumber": "receipt.blockNumber",
        "callCounter_blockHash": "receipt.blockHash",
        "callContract_txHash": "receipt.transactionHash",
        "callCounter_txIndex": "receipt.transactionIndex"
      }
    },
    {
      "description": "eth_getProof",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getProof",
        "params": ["$contractAddress",["0x0"],"latest"]
      },
      "expect": {
        "result.ret": {
          "include": {
            "address": "$contractAddress",
            "accountProof.length": 2,
            "nonce": 1,
            "storageHash": "0x0000000000000000000000000000000000000000000000000000000000000000"
          }
        },
        "result.ret.accountProof.length": {
          "eq": 2
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_getProof by invalid contract",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getProof",
        "params": ["0xB3AC868dB9316d",["0x0"],"latest"]
      },
      "expect": {
        "error": {
          "notEq": ""
        }
      }
    },
    {
      "description": "eth_getProof by future block",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getProof",
        "params": ["$contractAddress",["0x0"],"0x10000000000000"]
      },
      "expect": {
        "error": {
          "notEq": ""
        }
      }
    },
    {
      "description": "eth_getHeaderByNumber",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getHeaderByNumber",
        "params": ["0x5"]
      },
      "expect": {
        "result.ret.number": {
          "eq": "0x5"
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_getHeaderByNumber latest",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getHeaderByNumber",
        "params": ["latest"]
      },
      "expect": {
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_getHeaderByNumber earliest",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getHeaderByNumber",
        "params": ["earliest"]
      },
      "expect": {
        "result.ret.number": {
          "eq": "0x1"
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_getHeaderByNumber invalid block",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getHeaderByNumber",
        "params": ["0x123456789"]
      },
      "expect": {
        "error": {
          "notEq": ""
        }
      }
    },
    {
      "description": "eth_getHeaderByHash",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getHeaderByHash",
        "params": ["$callCounter_blockHash"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.hash": {
          "eq": "$callCounter_blockHash"
        }
      }
    },
    {
      "description": "eth_getBlockByNumber",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBlockByNumber",
        "params": ["latest", false]
      },
      "expect": {
        "error": {
          "eq": ""
        }
      },
      "output": {
        "getBlockByNumber_number": "result.ret.number",
        "getBlockByNumber_hash": "result.ret.hash"
      }
    },
    {
      "description": "eth_getBlockByNumber",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBlockByNumber",
        "params": ["$getBlockByNumber_number", true]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.hash": {
          "eq": "$getBlockByNumber_hash"
        }
      }
    },
    {
      "description": "eth_getBlockByHash",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBlockByHash",
        "params": ["$callCounter_blockHash", true]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.hash": {
          "eq": "$callCounter_blockHash"
        },
        "result.ret.transactions.length": {
          "gt": 0
        }
      }
    },
    {
      "description": "eth_getCode",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getCode",
        "params": ["$contractAddress", "latest"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "eq": 1598
        }
      }
    },
    {
      "description": "eth_getCode with empty address",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getCode",
        "params": ["0x0000000000000000000000000000000000000000", "latest"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x"
        }
      }
    },
    {
      "description": "eth_getStorageAt slot 0",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getStorageAt",
        "params": ["$contractAddress", "0x0", "latest"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "eq": 66
        },
        "result.ret": {
          "notEq": "0x0000000000000000000000000000000000000000000000000000000000000000"
        }
      }
    },
    {
      "description": "eth_getStorageAt slot 1",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getStorageAt",
        "params": ["$contractAddress", "0x1", "latest"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x0000000000000000000000000000000000000000000000000000000000000001"
        }
      }
    },
    {
      "description": "personal_newAccount",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "personal_newAccount",
        "params": ["testtest"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "eq": 42
        }
      },
      "output": {
        "newAccount_address": "result.ret"
      }
    },
    {
      "description": "eth_accounts",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_accounts",
        "params": []
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "gt": 0
        }
      }
    },
    {
      "description": "eth_protocolVersion",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_protocolVersion",
        "params": []
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x44"
        }
      }
    },
    {
      "description": "eth_gasPrice",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_gasPrice",
        "params": []
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "notEq": "0x0"
        }
      }
    },
    {
      "description": "eth_maxPriorityFeePerGas",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_maxPriorityFeePerGas",
        "params": []
      },
      "expect": {
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "eth_feeHistory",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_feeHistory",
        "params": [8, "latest", [ 25,75 ]]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.reward.length": {
          "eq": 8
        },
        "result.ret.baseFeePerGas.length": {
          "eq": 9
        }
      }
    },
    {
      "description": "eth_syncing",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_syncing",
        "params": []
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": false
        }
      }
    },
    {
      "description": "eth_getBlockTransactionCountByNumber not zero",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBlockTransactionCountByNumber",
        "params": ["numberToHex($callCounter_blockNumber)"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "notEq": "0x0"
        }
      }
    },
    {
      "description": "eth_getBlockTransactionCountByNumber zero",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBlockTransactionCountByNumber",
        "params": ["0x1"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x0"
        }
      }
    },
    {
      "description": "eth_getBlockTransactionCountByHash not zero",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getBlockTransactionCountByHash",
        "params": ["$callCounter_blockHash"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "notEq": "0x0"
        }
      }
    },
    {
      "description": "eth_getTransactionByBlockNumberAndIndex",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionByBlockNumberAndIndex",
        "params": ["numberToHex($callCounter_blockNumber)", "0x0"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.blockHash": {
          "eq": "$callCounter_blockHash"
        },
        "result.ret.transactionIndex": {
          "eq": "0x0"
        }
      }
    },
    {
      "description": "eth_getTransactionByBlockNumberAndIndex not exist",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionByBlockNumberAndIndex",
        "params": ["numberToHex($callCounter_blockNumber)", "0x100"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": null
        }
      }
    },
    {
      "description": "eth_getTransactionByBlockHashAndIndex",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionByBlockHashAndIndex",
        "params": ["$callCounter_blockHash", "numberToHex($callCounter_txIndex)"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.blockHash": {
          "eq": "$callCounter_blockHash"
        },
        "result.ret.hash": {
          "eq": "$callContract_txHash"
        }
      }
    },
    {
      "description": "eth_getTransactionByBlockHashAndIndex not exist",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionByBlockHashAndIndex",
        "params": ["$callCounter_blockHash", "0x100"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": null
        }
      }
    },
    {
      "description": "eth_getRawTransactionByBlockNumberAndIndex",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getRawTransactionByBlockNumberAndIndex",
        "params": ["numberToHex($callCounter_blockNumber)", "numberToHex($callCounter_txIndex)"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "gt": 100
        }
      },
      "output": {
        "getRawTransactionByBlockHashAndIndex_RawTx": "result.ret"
      }
    },
    {
      "description": "eth_getRawTransactionByBlockHashAndIndex",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getRawTransactionByBlockHashAndIndex",
        "params": ["$callCounter_blockHash", "0x0"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "gt": 100
        },
        "result.ret": {
          "eq": "$getRawTransactionByBlockHashAndIndex_RawTx"
        }
      }
    },
    {
      "description": "eth_getTransactionCount block 0",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionCount",
        "params": ["$accounts.0", "0x0"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x0"
        }
      }
    },
    {
      "description": "eth_getTransactionCount before accounts.1 call",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionCount",
        "params": ["$accounts.1", "latest"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x0"
        }
      }
    },
    {
      "description": "Call contract by accounts.1",
      "account": "$accounts.1",
      "type": "callContract",
      "options": {
        "contract": "$contractAddress",
        "method": "increase",
        "abi": "#CounterContract.abi",
        "args": [],
        "gas": "1000000"
      },
      "expect": {
        "receipt.status": {
          "eq": true
        },
        "error": {
          "eq": ""
        }
      },
      "output": {
        "counterCountract_hash": "receipt.transactionHash"
      }
    },
    {
      "description": "eth_getTransactionCount after accounts.1 call",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionCount",
        "params": ["$accounts.1", "latest"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x1"
        }
      }
    },
    {
      "description": "eth_getTransactionCount empty account",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionCount",
        "params": ["0x0000000000000000000000000000000000000000", "latest"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x0"
        }
      }
    },
    {
      "description": "eth_getTransactionByHash",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionByHash",
        "params": ["$counterCountract_hash"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.hash": {
          "eq": "$counterCountract_hash"
        }
      }
    },
    {
      "description": "eth_getTransactionByHash not exist",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionByHash",
        "params": ["0x16079215344f1f43b087b23222acbb6b4149ce5e0975dacea2938a76f7b480ac"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": null
        }
      }
    },
    {
      "description": "eth_getRawTransactionByHash",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getRawTransactionByHash",
        "params": ["$callContract_txHash"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "$getRawTransactionByBlockHashAndIndex_RawTx"
        }
      }
    },
    {
      "description": "eth_getRawTransactionByHash not exist",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getRawTransactionByHash",
        "params": ["0x16079215344f1f43b087b23222acbb6b4149ce5e0975dacea2938a76f7b480ac"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": "0x"
        }
      }
    },
    {
      "description": "eth_getTransactionReceipt",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionReceipt",
        "params": ["$callContract_txHash"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.blockHash": {
          "eq": "$callCounter_blockHash"
        },
        "result.ret.transactionHash": {
          "eq": "$callContract_txHash"
        }
      }
    },
    {
      "description": "eth_getTransactionReceipt not exist",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionReceipt",
        "params": ["0x16079215344f1f43b087b23222acbb6b4149ce5e0975dacea2938a76f7b480ac"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret": {
          "eq": null
        }
      }
    },
    {
      "description": "Deploy event contract",
      "account": "",
      "type": "deployContract",
      "options": {
        "code": "#EventContract.bytecode",
        "abi": "#EventContract.abi",
        "args": []
      },
      "expect": {
        "receipt.status": {
          "eq": true
        },
        "error": ""
      },
      "output": {
        "eventAddress": "receipt.contractAddress"
      }
    },
    {
      "description": "Tansfer Token to the new account saved in current node",
      "account": "",
      "type": "transfer",
      "options": {
        "to": "$newAccount_address",
        "amount": "1"
      },
      "expect": {
        "receipt.status": {
          "eq": true
        },
        "error": {
          "eq": ""
        }
      }
    },
    {
      "description": "Call event contract",
      "account": "$accounts.2",
      "type": "callContract",
      "options": {
        "contract": "$eventAddress",
        "method": "sendEvent",
        "abi": "#EventContract.abi",
        "args": [],
        "gas": "1000000"
      },
      "expect": {
        "receipt.status": {
          "eq": true
        },
        "error": {
          "eq": ""
        }
      },
      "output": {
        "callEvent_blockHash": "receipt.blockHash",
        "callEvent_topics0": "receipt.logs.0.topics.0",
        "callEvent_topics": "receipt.logs.0.topics"
      }
    },
    {
      "description": "eth_getLogs",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getLogs",
        "params": ["{\"blockHash\":\"$callEvent_blockHash\",\"topics\":[\"$callEvent_topics0\"]}"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "eq": 2
        },
        "result.ret.0.topics": {
          "eq": "$callEvent_topics"
        }
      }
    },
    {
      "description": "eth_sign with account save on current node",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_sign",
        "params": ["$newAccount_address", "0x68656c6c6f"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "gt": 0
        }
      }
    },
    {
      "description": "eth_signTransaction with account save on current node",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_signTransaction",
        "params": ["{\"from\":\"$newAccount_address\",\"to\":\"$eventAddress\",\"gas\":\"0x30d40\",\"data\":\"0x32b7a761\",\"gasPrice\":\"0x100\",\"nonce\":\"0x0\"}"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.raw.length": {
          "gt": 100
        },
        "result.ret.tx.v.length": {
          "gt": 2
        },
        "result.ret.tx.r.length": {
          "gt": 2
        },
        "result.ret.tx.s.length": {
          "gt": 2
        }
      },
      "output": {
        "signTransaction_raw": "result.ret.raw"
      }
    },
    {
      "description": "eth_sendRawTransaction send the raw tx signed in last step",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_sendRawTransaction",
        "params": ["$signTransaction_raw"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "eq": 66
        }
      },
      "output": {
        "sendRawTransaction_txHash": "result.ret"
      }
    },
    {
      "description": "verify the sendRawTransaction success",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionReceipt",
        "params": ["$sendRawTransaction_txHash"],
        "wait": 3000
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.status": {
          "eq": "0x1"
        },
        "result.ret.transactionHash": {
          "eq": "$sendRawTransaction_txHash"
        }
      }
    },
    {
      "description": "eth_sendTransaction with account save on current node",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_sendTransaction",
        "params": ["{\"from\":\"$newAccount_address\",\"to\":\"$eventAddress\",\"gas\":\"0x2b0b6\",\"data\":\"0x32b7a761\",\"gasPrice\":\"0x100\",\"nonce\":\"0x1\"}"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "gt": 0
        }
      },
      "output": {
        "sendTransaction_txHash": "result.ret"
      }
    },
    {
      "description": "verify the sendTransaction success",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_getTransactionReceipt",
        "params": ["$sendTransaction_txHash"],
        "wait": 3000
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.status": {
          "eq": "0x1"
        },
        "result.ret.transactionHash": {
          "eq": "$sendTransaction_txHash"
        }
      }
    },
    {
      "description": "eth_fillTransaction",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_fillTransaction",
        "params": ["{\"from\":\"$newAccount_address\",\"to\":\"$eventAddress\",\"data\":\"0x32b7a761\"}"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.tx.chainId": {
          "eq": "$chainId"
        },
        "result.ret.tx.nonce": {
          "eq": "0x2"
        },
        "result.ret.tx.gas": {
          "eq": "0x2b0b6"
        }
      }
    },
    {
      "description": "test send a transaction and resend, send",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_sendTransaction",
        "params": ["{\"from\":\"$newAccount_address\",\"to\":\"$eventAddress\",\"gas\":\"0x2b0b6\",\"data\":\"0x32b7a761\",\"gasPrice\":\"0x100\",\"nonce\":\"0x2\"}"]
      },
      "expect": {
        "error": {
          "eq": ""
        },
        "result.ret.length": {
          "gt": 0
        }
      },
      "output": {
        "resend_txHash1": "result.ret"
      }
    },
    {
      "description": "test send a transaction and resend, resend",
      "account": "",
      "type": "jsonRPC",
      "options": {
        "method": "eth_resend",
        "params": ["{\"from\":\"$newAccount_address\",\"to\":\"$eventAddress\",\"gas\":\"0x3b0b6\",\"data\":\"0x32b7a761\",\"gasPrice\":\"0x105\",\"nonce\":\"0x2\"}"]
      },
      "expect": {
        "error": {
          "notEq": ""
        }
      },
      "output": {
        "resend_txHash2": "result.ret"
      }
    }
  ]
}
